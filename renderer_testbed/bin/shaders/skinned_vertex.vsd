#version 450

// vertex
layout ( location = 0 ) in vec3 position_model_space;
layout ( location = 1 ) in vec3 Normal;
layout ( location = 2 ) in vec2 TexCoord;
layout ( location = 3 ) in vec3 Tangent;
layout ( location = 4 ) in vec3 Bitangent;

uniform mat4 projection_view_model;
uniform mat4 model_matrix;
uniform mat4 light_space_matrix;

// ! THIS MUST MATCH WITH LIT.VSD OUTPUT
out vec2 _TexCoord;
out vec3 _Normal;
out vec3 _Position;
out vec3 _Tangent;
out vec3 _Bitangent;
out vec4 frag_pos_light_space;
out vec3 _Frag_Pos;

void main() {
    // P = W1 * bone_world_space1 * P_internal1 + W2 * bone_world_space2 * P_internal2
    // P = W1 * bone_world_space1 * bone_rest_space_inverse1 * p_rest_space + W2 * bone_world_space2 * bone_rest_space_inverse2 * p_rest_space
    // SO: we store the weights (W1, W2 ...), we store p_rest_space once
    // The composite transform is bone_world_space * bone_rest_space_inverse -> takes something from rest space to world space relative to a specific bone
    // ---
    // skeletal animation system (bone_world_space1, bone_world_space2, bone_world_space3 ...) NOTE THAT THIS IS GENERATED BASED ON THE SKELETAL ANIMATION SYSTEM
    // Asset pipeline : constant (inverse rest pos of each bone)

    for (int i = 0; i < 4; i++) {
        _Position += position_model_space * bone_weights[i];
    }
	_Position = (model_matrix * vec4(position_model_space, 1.0)).xyz;
	_Normal = Normal;
	_TexCoord = TexCoord;
	_Tangent = Tangent;
	_Bitangent = Bitangent;
	_Frag_Pos = (model_matrix * vec4(position_model_space, 1.0)).xyz;

    frag_pos_light_space = light_space_matrix * vec4(_Position, 1.0);

	gl_Position = projection_view_model * vec4(position_model_space, 1.0); // the correct one
}