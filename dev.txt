
ARTICLES and RESOURCES:
https://erikonarheim.com/posts/understanding-collision-constraint-solvers/
https://box2d.org/files/ErinCatto_DynamicBVH_Full.pdf
https://freetype.org/freetype2/docs/tutorial/step2.html
https://learnopengl.com/In-Practice/Text-Rendering
https://www.google.com/search?client=firefox-b-d&q=stb+true+type
https://github.com/nothings/stb/blob/master/stb_truetype.h
https://github.com/madler/zlib/blob/master/test/example.c
https://www.google.com/search?client=firefox-b-d&q=3d+math+primer+for+graphics+and+game+development

checkout the tool Valgrind (has a tool which tells you if you write memory that you can't.)


More resources about loading obj and glTF
https://github.com/syoyo/tinygltf
https://github.com/jkuhlmann/cgltf

//----------------- THINGS TO DO BEFORE DEMO -----------------
Done:
[/] Figure out why the plane has the soulspear's texture
[/] Store the camera properties in the level and save and load it from the disk
[/] Program a player entity that traverses the world
[/] Fix the issue with segfault that's related to how we store mesh skeletons

NOW:
[ ] Create a button that displays the game play mode

Bucket:
[ ] Save and load asset data (mesh and materials) from disk
[ ] Create a floor that occupies the floor grid
[ ] Display the world grid
[ ] Create the level editor UI widget that allows you to write pixels to a grid
[ ] Create a button that displays the level editor mode
[ ] Create a button that displays the inspector mode (allows you to select entities and view their properties)
? [ ] Create a mesh loader UI widget that displays the contents of the mesh and what we want to load
[ ] Store the light properties in the level and save and load it from the disk
! [ ] Design and think about how the timeline mechanic works and should look like for the demo
[ ] Develop a level around the timeline mechanic of the game
[ ] Make the demo scene as pretty as possible
[ ] Load embedded textures properly

/// @remove
Beta access request.

Hi Mr Blow. I hope this email finds you well.

I am looking to find a way to help out with the beta testing of the compiler, and to learn along the way.
Currently I am a uni student that's gone way overboard. Here's a link to my current project: ...

I've been working on a custom game engine / framework in C called SketchEngine. Even though I'm planning on rewriting this framework, the idea is to have a very thin layer that enables me to prototype my ideas outside of "off the shelf engines", but not having to rewrite mesh loading everytime for example. And now I'm using that framework to build a game in c++ for my final school assignment that's due in 6 months. I had never done any graphics programming but have finally managed to get opengl up and running, gettings all sorts of shadow mapping to work along with skinned mesh rendering. You can find a terrible demo of my game and game editor in the above link. I've learnt so much from your livestreams and have tried to adopt some of your programming styles and thinking.

What I'm trying to say is that I'm way past a "hello world" program. I work on my project from both windows and linux. On the side (part-time) I would like to attempt to recreate my framework in Jai. I can work on the project both in a windows and a linux environment. I've found not being able to work on a project in different environments as straightforward as I had hoped to be a bummer. I hope it won't be as painful to setup in Jai. That's something I would like to report on.

Here are my contact details in case you find my skillsets acceptible:
Name: ...
Discord: ...
Github: ...

Thank you for your time.

----------------------------------------------------------------------------
///
/// Things to complete for the demo of the engine for the artists:
///
[/] Fix / improve directional light
[ ] Import more assets and create a demo scene:
	[/] Add HDR textures and tonemapping to main framebuffers
    [/] Add Bloom
	[/] Work on custom materials and custom shaders
	[ ] Work on loading and saving custom materials and shaders to the disk
	[ ] Work on saving light settings to the disk and loading it
	[ ] Have an animated character that can move around
	[ ] If time allows, create a simple swapping between timeline mechanic
	[/] Fix shadow mapping for skinned meshes (point light)
	[/] Add Gamma Correction
	[/] Improve shader creation pipeline (more flexible)
----------------------------------------------------------------------------