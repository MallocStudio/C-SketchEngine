
ARTICLES and RESOURCES:
https://erikonarheim.com/posts/understanding-collision-constraint-solvers/
https://box2d.org/files/ErinCatto_DynamicBVH_Full.pdf
https://freetype.org/freetype2/docs/tutorial/step2.html
https://learnopengl.com/In-Practice/Text-Rendering
https://www.google.com/search?client=firefox-b-d&q=stb+true+type
https://github.com/nothings/stb/blob/master/stb_truetype.h
https://github.com/madler/zlib/blob/master/test/example.c
https://www.google.com/search?client=firefox-b-d&q=3d+math+primer+for+graphics+and+game+development

checkout the tool Valgrind (has a tool which tells you if you write memory that you can't.)


More resources about loading obj and glTF
https://github.com/syoyo/tinygltf
https://github.com/jkuhlmann/cgltf

//----------------- THINGS TO DO BEFORE DEMO -----------------
Done:
[/] Figure out why the plane has the soulspear's texture
[/] Store the camera properties in the level and save and load it from the disk
[/] Program a player entity that traverses the world
[/] Fix the issue with segfault that's related to how we store mesh skeletons

NOW:
[ ] Create a button that displays the game play mode

Bucket:
[ ] Save and load asset data (mesh and materials) from disk
[ ] Create a floor that occupies the floor grid
[ ] Display the world grid
[ ] Create the level editor UI widget that allows you to write pixels to a grid
[ ] Create a button that displays the level editor mode
[ ] Create a button that displays the inspector mode (allows you to select entities and view their properties)
? [ ] Create a mesh loader UI widget that displays the contents of the mesh and what we want to load
[ ] Store the light properties in the level and save and load it from the disk
! [ ] Design and think about how the timeline mechanic works and should look like for the demo
[ ] Develop a level around the timeline mechanic of the game
[ ] Make the demo scene as pretty as possible
[ ] Load embedded textures properly