#version 450

///
/// prototypes
///

struct Dir_Light {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float intensity;
};

struct Point_Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float constant;
    float linear;
    float quadratic;

    /* shadows */
    float far_plane;
    samplerCube shadow_map;
};

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D normal;
    float shininess; // is it the same as 'specular_power'?
    vec4 base_diffuse;
};

vec3 calc_dir_light(Dir_Light light, vec3 normal, vec3 view_dir);
vec3 calc_point_light(Point_Light light, vec3 normal, vec3 frag_pos, vec3 view_dir);
float calc_shadows_directional(vec4 param_frag_pos_light_space);
float calc_shadows_omnidirectional(vec3 frag_pos, Point_Light light);

///
/// main
///

in vec2 _TexCoord;
in vec3 _Normal;
in mat3 _TBN;
in vec3 _Position;
in vec3 _Tangent;
in vec3 _Bitangent;
in vec3 _Frag_Pos;
in vec4 frag_pos_light_space;

uniform Dir_Light dir_light;

#define MAX_NUM_POINT_LIGHTS 4
uniform int num_of_point_lights; // ? why can't I use this instead of MAX_NUM_POINT_LIGHTS in the for loop
uniform Point_Light point_lights[MAX_NUM_POINT_LIGHTS];

uniform sampler2D shadow_map; // directional shadow map
// uniform mat4 model_matrix;
uniform vec3 camera_pos;
uniform Material material;

out vec4 FragColour;
void main () {
        //- properties
    vec3 norm = normalize(_Normal);
    vec3 view_dir = normalize(camera_pos - _Frag_Pos);

        //- directional light
    vec3 result = calc_dir_light(dir_light, norm, view_dir);
        //- point light
    for (int i = 0; i < MAX_NUM_POINT_LIGHTS; i++) {
        if (i < num_of_point_lights) {
            result += calc_point_light(point_lights[i], norm, _Frag_Pos, view_dir);
        }
    }
    FragColour = vec4(result, 1.0);
}

///
/// lighting calculations
///

vec3 calc_dir_light(Dir_Light light, vec3 normal, vec3 view_dir) {
    vec3 light_dir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);

    // specular shading
    vec3 reflect_dir = reflect(-light_dir, normal);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);

    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, _TexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, _TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, _TexCoord));

    ambient  *= light.intensity;
	diffuse  *= light.intensity;
	specular *= light.intensity;

    // shadows
    float shadow = calc_shadows_directional(frag_pos_light_space);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * material.base_diffuse.xyz;

    // return ambient + diffuse + specular;
    return lighting;
}

vec3 calc_point_light(Point_Light light, vec3 normal, vec3 frag_pos, vec3 view_dir) {
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);

    // specular shading
    vec3 reflect_dir = reflect(-light_dir, normal);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);

    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, _TexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, _TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, _TexCoord));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    // shadows
    float shadow = calc_shadows_omnidirectional(frag_pos, light);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * material.base_diffuse.xyz;

    // return ambient + diffuse + specular;
    return lighting;
}

float calc_shadows_directional(vec4 param_frag_pos_light_space) {
	// perform perspective divide
	vec3 proj_coords = param_frag_pos_light_space.xyz / param_frag_pos_light_space.w;
	// transform to [0,1] range
	proj_coords = proj_coords * 0.5 + 0.5;
	// get closest depth value from light's perspective (using [0,1] range frag_pos_light as coords)
	float closest_depth = texture(shadow_map, proj_coords.xy).r;
	// get depth of current fragment from light's perspective
	float current_depth = proj_coords.z;
	// check whether current frag pos is in shadow

	float bias = max(0.005 * (1.0 - dot(_Normal, dir_light.direction)), 0.005);
	// float shadow = current_depth - bias > closest_depth  ? 1.0 : 0.0;
	float shadow = 0.0;
	vec2 texel_size = 1.0 / textureSize(shadow_map, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcf_depth = texture(shadow_map, proj_coords.xy + vec2(x, y) * texel_size).r;
			shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0;

	if (proj_coords.z > 1.0) shadow = 0.0;
	return shadow;
}

float calc_shadows_omnidirectional(vec3 frag_pos, Point_Light light) {
    vec3 frag_to_light = frag_pos - light.position;
    float closest_depth = texture(light.shadow_map, frag_to_light).r;
    // remap closest_depth from [0,1] to [0,far_plane]
    closest_depth *= light.far_plane;

    // checkout how we calculated shadow map (fsd) for more info
    float current_depth = length(frag_to_light);

    float bias = 0.05;
    float shadow = current_depth - bias > closest_depth ? 1.0 : 0.0;

    return shadow;
}