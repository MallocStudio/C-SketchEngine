///
/// lighting calculations
///

vec3 calc_dir_light(Dir_Light light, vec3 normal, vec3 view_dir) {
//  { The new method takes normal into account
        // //- Surface Material
        // vec3 kD = vec3(1, 1, 1); // material colour
        // vec3 kA = kD;            // surface ambient
        // vec3 kS = normalize(kD); // material specular

        // //- lambert term with L reversed to face the light

        // N = TBN * (tex_normal * 2 - 1);
        // N = (model_matrix * vec4(N, 0)).xyz;

        // vec3 light_dir = normalize(light.direction);
        // float lambert_term = max( 0.0, dot(N, -light_dir));

        // //- calculate view vector and reflection vector
        // vec3 V = normalize(camera_pos - _Position);
        // vec3 R = reflect(light_dir, N);

        // //- calculate specular term
        // float specular_term = pow(max(0, dot( R, V )), material.shininess);

        // //- calculate each light properly
        // vec3 ambient  = kA * light.ambient  * tex_diffuse;
        // vec3 diffuse  = kD * light.diffuse  * tex_diffuse * lambert_term * material.base_diffuse.xyz;
        // vec3 specular = kS * light.specular * tex_diffuse * specular_term;
//  }

//  { PREVIOUS METHOD OF SHADING IGNORED NORMAL MAPPING
        vec3 tex_diffuse = texture(material.diffuse, _TexCoord).xyz;
        vec3 tex_normal  = texture(material.normal,  _TexCoord).xyz; // * 2 - 1

        vec3 T = normalize(_Tangent);
        vec3 B = normalize(_Bitangent);
        mat3 TBN = mat3(T, B, normal);
        normal = TBN * (tex_normal * 2 - 1);
        normal = (model_matrix * vec4(normal, 0)).xyz;

        vec3 light_dir = normalize(-light.direction);
        float lambert_term = max( 0.0, dot(normal, light_dir));

            //- calculate specular term
        float specular_term = 0.0;
        {   // Phong method
            // vec3 V = normalize(camera_pos - _Position);
            // vec3 R = reflect(-light_dir, normal);
            // vec3 reflect_dir = reflect(-light_dir, normal);
            // specular_term = pow(max(dot(R, V), 0.0), material.shininess);
        }
        {   // Blinn Phong method
            vec3 halfway_dir = normalize(light_dir + view_dir);
            specular_term = pow(max(dot(normal, halfway_dir), 0.0), material.shininess);
        }

        // combine results
        vec3 ambient = light.ambient * tex_diffuse;
        vec3 diffuse = light.diffuse * lambert_term * tex_diffuse * lambert_term;
        vec3 specular = light.specular * specular_term * vec3(texture(material.specular, _TexCoord));
//  }

    ambient  *= light.intensity;
	diffuse  *= light.intensity;
	specular *= light.intensity;

    //- shadows
    float shadow = calc_shadows_directional(frag_pos_light_space);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * material.base_diffuse.xyz;
    return lighting;

    // return ambient + diffuse + specular;
}

vec3 calc_point_light(Point_Light light, vec3 normal, vec3 frag_pos, vec3 view_dir) {
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);

    // specular shading
    float spec = 0.0;
    {   // Phong method
        // vec3 reflect_dir = reflect(-light_dir, normal);
        // spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
    }
    {   // Blinn Phong method
        vec3 halfway_dir = normalize(light_dir + view_dir);
        spec = pow(max(dot(normal, halfway_dir), 0.0), material.shininess);
    }

    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, _TexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, _TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, _TexCoord));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    // shadows
    float shadow = calc_shadows_omnidirectional(frag_pos, light);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * material.base_diffuse.xyz;

    // return ambient + diffuse + specular;
    return lighting;
}

float calc_shadows_directional(vec4 param_frag_pos_light_space) {
	// perform perspective divide
	vec3 proj_coords = param_frag_pos_light_space.xyz / param_frag_pos_light_space.w;
	// transform to [0,1] range
	proj_coords = proj_coords * 0.5 + 0.5;
	// get depth of current fragment from light's perspective
	float current_depth = proj_coords.z;
	// check whether current frag pos is in shadow
    float shadow = 0.0;
	float bias = max(0.005 * (1.0 - dot(_Normal, dir_light.direction)), 0.005);
    {   /// NO SMOOTHING
            // get closest depth value from light's perspective (using [0,1] range frag_pos_light as coords)
        float closest_depth = texture(shadow_map, proj_coords.xy).r;
        shadow = current_depth - bias > closest_depth  ? 1.0 : 0.0;
    }
    {   /// WITH SMOOTHING
        // vec2 texel_size = 1.0 / textureSize(shadow_map, 0);
        // int smoothing_amount = 2;
        // for(int x = -smoothing_amount; x <= smoothing_amount; ++x)
        // {
        //     for(int y = -smoothing_amount; y <= smoothing_amount; ++y)
        //     {
        //         float pcf_depth = texture(shadow_map, proj_coords.xy + vec2(x, y) * texel_size).r;
        //         shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0;
        //     }
        // }
        // shadow /= 20.0;
    }
    {   /// WITH SMOOTHING v2
        // int smoothing_amount = 5;
        // vec2 texel_size = 1.0 / textureSize(shadow_map, 0);

        // int count = 1;
        // for(int x = -smoothing_amount; x <= smoothing_amount; ++x)
        // {
        //     for(int y = -smoothing_amount; y <= smoothing_amount; ++y)
        //     {
        //         float pcf_depth = texture(shadow_map, proj_coords.xy + vec2(x, y) * texel_size).r;
        //         shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0;
        //     }
        // }
        // shadow /= count*5;
    }

	if (proj_coords.z > 1.0) shadow = 0.0;
	return shadow;
}

float calc_shadows_omnidirectional(vec3 frag_pos, Point_Light light) {
    vec3 frag_to_light = frag_pos - light.position;
    float closest_depth = texture(light.shadow_map, frag_to_light).r;
    // remap closest_depth from [0,1] to [0,far_plane]
    closest_depth *= light.far_plane;

    // checkout how we calculated shadow map (fsd) for more info
    float current_depth = length(frag_to_light);

    float shadow = 0.0;
    float bias = 0.05;
    {   /// NO SMOOTHING
        shadow = current_depth - bias > closest_depth ? 1.0 : 0.0;
    }
    {   // WITH SMOOTHING
        // vec2 texel_size = 1.0 / textureSize(light.shadow_map, 0);
        // int smoothing_amount = 1;
        // for(int x = -smoothing_amount; x <= smoothing_amount; ++x)
        // {
        //     for(int y = -smoothing_amount; y <= smoothing_amount; ++y)
        //     {
        //         for (int z = -smoothing_amount; z <= smoothing_amount; ++z) {
        //             vec3 move_by = vec3(x, y, z);
        //             move_by.x *= texel_size.x;
        //             move_by.y *= texel_size.y;
        //             move_by.z *= texel_size.y;
        //             vec3 proj_coords = frag_pos - light.position.xyz + vec3(x, y, z) * move_by;
        //             float pcf_depth = texture(light.shadow_map, proj_coords).r;
        //             shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0;
        //         }
        //     }
        // }
        // shadow /= 20.0;
    }

    return shadow;
}

layout(location = 0) out vec3 FragColour;
void main () {
        //- properties
    vec3 norm = normalize(_Normal);
    vec3 view_dir = normalize(camera_pos - _Frag_Pos);

        //- directional light
    vec3 result = calc_dir_light(dir_light, norm, view_dir);
        //- point light
    for (int i = 0; i < MAX_NUM_POINT_LIGHTS; i++) {
        if (i < num_of_point_lights) {
            result += calc_point_light(point_lights[i], norm, _Frag_Pos, view_dir);
        }
    }

    // FragColour = vec4(result, 1.0);
    FragColour = result;
}