/// To be matched with better_lit.fsd
#version 450

// vertex
layout ( location = 0 ) in vec3 Position; // model space
layout ( location = 1 ) in vec3 Normal;
layout ( location = 2 ) in vec2 TexCoord;
layout ( location = 3 ) in vec3 Tangent;
layout ( location = 4 ) in vec3 Bitangent;
layout ( location = 5 ) in ivec4 bone_ids;
layout ( location = 6 ) in vec4 bone_weights;

uniform mat4 projection_view_model;
uniform mat4 model_matrix;
uniform mat4 light_space_matrix;

const int MAX_BONES = 100; // must match with SE_SKELETON_BONES_CAPACITY of SE_Skeleton
const int MAX_BONE_WEIGHTS = 4;
uniform mat4 bones[MAX_BONES];

// ! THIS MUST MATCH WITH BETTER_LIT.FSD INPUT
out vec2 _TexCoord;
out vec3 _Normal;
out vec3 _Position;
out vec3 _Tangent;
out vec3 _Bitangent;
out vec4 frag_pos_light_space;
out vec3 _Frag_Pos;

void main() {
    vec4 total_position = vec4(0.0f); // the position of the vertex in the current animation
    vec3 total_normal = vec3(0.0f);

    for (int i = 0; i < MAX_BONE_WEIGHTS; i++) {
        if (bone_ids[i] == -1) continue;
        if (bone_ids[i] >= MAX_BONES) {
            total_position = vec4(Position, 1.0f);
            break;
        }

        vec4 local_pos = bones[bone_ids[i]] * vec4(Position, 1.0f);
        total_position += local_pos * bone_weights[i];

        vec3 local_normal = mat3(bones[bone_ids[i]]) * Normal;
        total_normal += local_normal * bone_weights[i];
    }

        // in world space
	_Position = (model_matrix * total_position).xyz;

    // _Normal = Normal;
    _Normal = total_normal;
	_TexCoord = TexCoord;
	_Tangent = Tangent;
	_Bitangent = Bitangent;
	_Frag_Pos = (model_matrix * total_position).xyz;

    frag_pos_light_space = light_space_matrix * vec4(_Position, 1.0);

	gl_Position = projection_view_model * total_position;
}


// P = W1 * bone_world_space1 * P_internal1 + W2 * bone_world_space2 * P_internal2
    // P = W1 * bone_world_space1 * bone_rest_space_inverse1 * p_rest_space + W2 * bone_world_space2 * bone_rest_space_inverse2 * p_rest_space
    // SO: we store the weights (W1, W2 ...), we store p_rest_space once
    // The composite transform is bone_world_space * bone_rest_space_inverse -> takes something from rest space to world space relative to a specific bone
    // ----------------------------------------------------------
    // skeletal animation system (bone_world_space1, bone_world_space2, bone_world_space3 ...) NOTE THAT THIS IS GENERATED BASED ON THE SKELETAL ANIMATION SYSTEM
    // Asset pipeline : constant (inverse rest pos of each bone)