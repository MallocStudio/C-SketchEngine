#ifndef TYPES_H
#define TYPES_H

/// sdl2 types
#include "SDL.h"
#include "SDL_ttf.h"

/// primitive types
typedef float     f32;
typedef int       i32;
typedef uint32_t  u32;
typedef Uint8     u8;
typedef enum bool {
    false = 0,
    true  = 1,
} bool;
typedef SDL_Rect  Rect;
typedef SDL_FRect RectF;
typedef SDL_Point Vec2i;

/// color types
typedef struct {
    f32 r, g, b, a; // from 0 - 1
} RGBA;
SDL_Color rgba_to_sdl_color(const RGBA *rgba);

/// text and fonts
typedef struct Text { // ! MUST use the setters to generate the text again
    TTF_Font    *font;    // the font
    SDL_Surface *surface; // the sdl surface (on the CPU side)
    SDL_Texture *texture; // the texture generated by SDL (on the GPU side)
    char        *buffer;    // the text
    RGBA        color;   // the color of the text
    SDL_Renderer *renderer; // the renderer that renders this text. this does not get freed after uninit
} Text;
/// create a Text on the data. also generates the texture. text should not be Null
void init_text(Text *text, SDL_Renderer *renderer, const char *data, TTF_Font *font, const RGBA color);
/// frees text. text becomes and invalid pointer after
void uninit_text(Text *text);
///
void set_text_color(Text *text, RGBA color);
/// returns the rect of the texture based on font. note that the pos will be the ones passed in
Rect get_text_rect(Text *text, int pos_x, int pos_y);
#endif // TYPES_H